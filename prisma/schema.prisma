// Note: for storing vector embeddings, we use the "vector" extension for PostgreSQL

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    extensions = [vector]
}

model User{
    id String @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    imageUrl String?
    firstName String?
    lastName String?
    
    emailAddress String @unique
    
    credits Int @default(150)

    userToProjects UserToProject[]

    questionsAsked Question[]
}


model Project {
    id String @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name String
    repoUrl String

    deletedAt DateTime? 

    userToProjects UserToProject[]

    Commit Commit[]

    SourceCodeEmbedding SourceCodeEmbedding[]

    IndexingProgress IndexingProgress?

    savedQuestions Question[]
}

// User <-> Project (Many to Many)
model UserToProject {
    id String @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String
    projectId String

    user User @relation(fields: [userId], references: [id])
    project Project @relation(fields: [projectId], references: [id])

    @@unique([userId, projectId])
}

model Commit{
    id String @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    projectId String
    project Project @relation(fields: [projectId], references: [id])

    commitMessage String
    commitHash String
    commitAuthorName String
    commitAuthorAvatar String?
    commitDate DateTime

    // ai summary
    summary String?
}


model SourceCodeEmbedding {
    id String @id @default(cuid())
    
    summaryEmbedding Unsupported("vector(768)")? // 768 because that's the dimension of the embedding Gemini provides
    sourceCode String
    fileName String
    summary String

    projectId String
    project Project @relation(fields: [projectId], references: [id])
}

model IndexingProgress {
  projectId   String   @id @default(uuid())
  currentStep Int
  totalSteps  Int
  isFinished  Boolean? @default(false)
  
  updatedAt   DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id])
}

model Question{
    id String @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

     question String
    answer String

    fileReferences Json?

    projectId String
    project Project @relation(fields: [projectId], references: [id])

    userId String
    user User @relation(fields: [userId], references: [id])

   
}